<?php

/*
 * This file is part of the Stash package.
 *
 * (c) Robert Hafner <tedivm@tedivm.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Stash\Driver;

use Stash;

/**
 * The Xcache driver is a wrapper for the Xcache extension, which allows developers to store data in memory.
 *
 * @author  Mate Skoblar <m.ateskobla.r@gmail.com>
 */
class Xcache extends AbstractDriver
{
    /**
     * Default maximum time an Item will be stored.
     *
     * @var int
     */
    protected $ttl;

    /**
     * This is an install specific namespace used to segment different applications from interacting with each other
     * when using Xcache. It's generated by creating an md5 of this file's location.
     *
     * @var string
     */
    protected $xcacheNamespace;

    /**
     * {@inheritdoc}
     */
    public function getDefaultOptions()
    {
        return array(
            'ttl' => 300,
            'namespace' => md5(__FILE__),
        );
    }

    /**
     * This function should takes an array which is used to pass option values to the driver.
     *
     * * ttl - This is the maximum time the item will be stored.
     * * namespace - This should be used when multiple projects may use the same library.
     *
     * @param array $options
     */
    public function setOptions(array $options = array())
    {
        $options += $this->getDefaultOptions();

        $this->ttl = (int) $options['ttl'];
        $this->xcacheNamespace = $options['namespace'];
    }

    /**
     * {@inheritdoc}
     */
    public function getData($key)
    {
        $keyString = self::makeKey($key);

        return xcache_isset($keyString) ? xcache_get($keyString) : false;
    }

    /**
     * {@inheritdoc}
     */
    public function storeData($key, $data, $expiration)
    {
        $life = $this->getCacheTime($expiration);

        return xcache_set($this->makeKey($key), array('data' => $data, 'expiration' => $expiration), $life);
    }

    /**
     * {@inheritdoc}
     */
    public function clear($key = null)
    {
        if (!isset($key)) {
            xcache_unset_by_prefix('');
        } else {
            xcache_unset_by_prefix($this->makeKey($key));
        }

        return true;
    }

    /**
     * {@inheritdoc}
     */
    public function purge()
    {
        xcache_unset_by_prefix($this->makeKey(array()));

        return true;
    }

    /**
     * This driver is available if the xcache extension is present and loaded on the system.
     *
     * @return bool
     */
    public static function isAvailable()
    {
        return extension_loaded('xcache');
    }

    /**
     * Turns a key array into a string.
     *
     * @param array $key
     *
     * @return string
     */
    protected function makeKey($key)
    {
        $keyString = md5(__FILE__).'::'; // make it unique per install

        if (isset($this->xcacheNamespace)) {
            $keyString .= $this->xcacheNamespace.'::';
        }

        foreach ($key as $piece) {
            $keyString .= $piece.'::';
        }

        return $keyString;
    }

    /**
     * Converts a timestamp into a TTL.
     *
     * @param int $expiration
     *
     * @return int
     */
    protected function getCacheTime($expiration)
    {
        $life = $expiration - time();

        return $this->ttl < $life ? $this->ttl : $life;
    }
}
